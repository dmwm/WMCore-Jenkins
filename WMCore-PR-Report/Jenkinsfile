def pylintJob
def unittestJob

pipeline {
    agent {
        label 'cms-dmwm-el9'
   }

   options {
       timeout(time: 30, unit: 'MINUTES')
   }

    environment {
        CODE_REPO = "WMCore"
        WMCORE_REPO = "dmwm"
        DMWMBOT_TOKEN = credentials('d0bc4ba6-d9c5-4668-9839-1b7ff6f795fe')
    }

    stages {
        stage('Setup') {
            steps {
                cleanWs()

                git branch: params.WMCORE_JENKINS_REF, poll: false, changelog: false, url: params.WMCORE_JENKINS_REPO

                sh '''
                echo "$(TZ=GMT date): Job name is $JOB_NAME"

                echo "WMCore Jenkins Environment"
                export | grep WMCORE

                echo "Creating a venv at $WORKSPACE and installing dependencies"
                python3 -m venv .
                $WORKSPACE/bin/pip install jinja2 xunitparser PyGithub

                echo "Fetching list of unstable tests from github"
                curl -o $WORKSPACE/UnstableTests.txt https://raw.githubusercontent.com/dmwm/WMCore/master/test/etc/UnstableTests.txt

                mkdir -p $WORKSPACE/artifacts
                '''
            }
        }
        stage('Update GitHub PR status') {
            steps {
                sh '''
                $WORKSPACE/bin/python $WORKSPACE/ContainerScripts/PullRequestTestBegin.py
                '''
            }
        }
        stage('Trigger unittests') {
            steps {
                script {
                    unittestJob = build(
                        job: 'WMCore-PR-Test',
                        propagate: false,
                        parameters: [
                            string(name: 'ghprbPullId', value: "${env.ghprbPullId}"),
                            string(name: 'ghprbTargetBranch', value: "${env.ghprbTargetBranch}")
                        ]
                    )
                }
            }
        }
        stage('Trigger pylint') {
            steps {
                script {
                    pylintJob = build(
                        job: 'WMCore-PR-pylint',
                        parameters: [
                            string(name: 'ghprbPullId', value: "${env.ghprbPullId}"),
                            string(name: 'ghprbTargetBranch', value: "${env.ghprbTargetBranch}")
                        ]
                    )
                }
            }
        }
        stage('Copy artifacts') {
            steps {
                copyArtifacts filter: 'artifacts/*.json, artifacts/pep*.txt',
                    fingerprintArtifacts: true,
                    flatten: true,
                    projectName: 'WMCore-PR-pylint',
                    selector: specific("${pylintJob.number}"),
                    target: 'LatestPylint'

                copyArtifacts filter: 'artifacts/nosetest*.xml',
                    fingerprintArtifacts: true,
                    projectName: 'WMCore-PR-Test',
                    selector: specific("${unittestJob.number}"),
                    target: 'LatestUnitTests'

                copyArtifacts filter: 'artifacts/nosetest*.xml',
                    fingerprintArtifacts: true,
                    projectName: 'WMCore-Unittest-Baseline',
                    selector: lastSuccessful(),
                    target: 'MasterUnitTests'
            }
        }
        stage('Generate Reports') {
            steps {
                sh '''
                echo "$(TZ=GMT date): generating PR report..."

                ls $WORKSPACE

                git clone https://github.com/dmwm/WMCore.git code

                JENKINS_JINJA_TEMPLATE_PATH=$WORKSPACE/templates \
                $WORKSPACE/bin/python $WORKSPACE/ContainerScripts/PullRequestReport.py
                '''
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'artifacts/PullRequestReport.html', followSymlinks: false

            junit keepTestNames: true,
            skipPublishingChecks: true,
            stdioRetention: '',
            skipMarkingBuildUnstable: true, 
            testResults: 'LatestUnitTests/*/nosetests*.xml'

            cleanWs()
        }
    }
}
